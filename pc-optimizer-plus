# PC Optimizer Plus - Themed GUI Tool with Advanced Features
# Uses ttkbootstrap for modern UI (Dark theme, icons, tabs, sidebar)

import os
import psutil
import platform
import shutil
import subprocess
import urllib.request
import ctypes
import threading
import time
import tkinter as tk
import tkinter.filedialog as fd
import ttkbootstrap as tb
from ttkbootstrap.constants import *
from ttkbootstrap.scrolled import ScrolledText
from tkinter import messagebox
from collections import defaultdict
from tkinter import PhotoImage

app_version = "1.2.0"

# ---------------- Utility Functions ----------------
def run_command(cmd):
    try:
        return subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT).decode()
    except subprocess.CalledProcessError as e:
        return e.output.decode()

def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False

def threaded(fn):
    def wrapper():
        t = threading.Thread(target=lambda: add_output(fn()))
        t.start()
    return wrapper

# ---------------- Optimization Functions ----------------
def get_cpu_info():
    return f"CPU Usage: {psutil.cpu_percent()}%"

def get_memory_info():
    mem = psutil.virtual_memory()
    return f"Memory: {mem.percent}% used ({mem.used // (1024 ** 2)}MB / {mem.total // (1024 ** 2)}MB)"

def get_disk_usage():
    usage = psutil.disk_usage('/')
    return f"Disk Usage: {usage.percent}% ({usage.used // (1024 ** 3)}GB / {usage.total // (1024 ** 3)}GB)"

def list_running_processes():
    return "\n".join([f"{p.info['name']} - CPU: {p.info['cpu_percent']}%" for p in psutil.process_iter(['name', 'cpu_percent'])])

def clean_temp():
    deleted = 0
    for temp_dir in [os.getenv('TEMP'), r"C:\\Windows\\Temp"]:
        for root, _, files in os.walk(temp_dir):
            for f in files:
                try:
                    os.remove(os.path.join(root, f))
                    deleted += 1
                except:
                    pass
    return f"Deleted {deleted} temp files."

def open_disk_cleanup():
    subprocess.Popen('cleanmgr')
    return "Disk Cleanup opened."

def disable_startup_items():
    try:
        subprocess.run("reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StartupApproved\\Run /v DisabledSample /t REG_BINARY /d 030000000000000000000000 /f", shell=True)
        return "Disabled a startup registry sample (for demo)."
    except:
        return "Failed to disable startup items."

def create_restore_point():
    return run_command('powershell -Command "Checkpoint-Computer -Description \"Optimizer\" -RestorePointType MODIFY_SETTINGS"')

def check_network_speed():
    try:
        start = time.time()
        urllib.request.urlopen("https://www.google.com", timeout=5)
        end = time.time()
        return f"Ping to google.com: {(end - start) * 1000:.2f} ms"
    except:
        return "Network check failed."

def get_system_info():
    sys = platform.uname()
    return f"{sys.system} {sys.release}\nCPU: {sys.processor}\nNode: {sys.node}\nArch: {platform.architecture()[0]}"

def update_check():
    try:
        remote = urllib.request.urlopen("https://raw.githubusercontent.com/youruser/yourrepo/main/version.txt").read().decode().strip()
        return f"New version available: {remote}" if remote != app_version else "App is up-to-date."
    except:
        return "Failed to check for updates."

def uninstall_bloatware():
    bloat = ["bing", "xbox", "solitaire", "candy"]
    removed = []
    for b in bloat:
        run_command(f"powershell Get-AppxPackage *{b}* | Remove-AppxPackage")
        removed.append(b)
    return f"Attempted to remove: {', '.join(removed)}"

# ---------------- New Features ----------------
def scan_large_files():
    folder = fd.askdirectory(title="Select folder to scan")
    if not folder:
        return "Scan cancelled."
    large_files = []
    for root, _, files in os.walk(folder):
        for file in files:
            path = os.path.join(root, file)
            try:
                size = os.path.getsize(path)
                if size > 100 * 1024 * 1024:
                    large_files.append((path, size))
            except:
                continue
    large_files.sort(key=lambda x: -x[1])
    return "\n".join([f"{f[0]} - {f[1] // (1024 * 1024)}MB" for f in large_files[:20]]) or "No large files found."

def find_duplicate_files():
    folder = fd.askdirectory(title="Select folder to find duplicates")
    if not folder:
        return "Duplicate scan cancelled."
    hashes = defaultdict(list)
    for root, _, files in os.walk(folder):
        for file in files:
            try:
                path = os.path.join(root, file)
                with open(path, 'rb') as f:
                    h = hash(f.read(4096))
                    hashes[h].append(path)
            except:
                continue
    dupes = [files for files in hashes.values() if len(files) > 1]
    return "\n\n".join(["\n".join(group) for group in dupes]) or "No duplicates found."

def ai_suggestions():
    issues = []
    if psutil.virtual_memory().percent > 85:
        issues.append("⚠ High RAM usage")
    if psutil.cpu_percent() > 85:
        issues.append("⚠ High CPU usage")
    if psutil.disk_usage('/').percent > 90:
        issues.append("⚠ Low disk space")
    if not issues:
        return "System looks healthy."
    return "\n".join(issues)

# ---------------- GUI Setup ----------------
app = tb.Window(themename="darkly")
app.title("⚡ PC Optimizer Plus")
app.geometry("1000x750")
app.iconbitmap("optimizer.ico")

def change_theme(theme):
    app.style.theme_use(theme)

notebook = tb.Notebook(app)
notebook.pack(fill=BOTH, expand=True, padx=10, pady=10)

output = ScrolledText(app, width=110, height=15)
output.pack(pady=10)

theme_menu = tb.Menubutton(app, text="Theme", bootstyle="secondary")
theme_dropdown = tb.Menu(theme_menu)
theme_menu['menu'] = theme_dropdown
for theme_name in tb.Style().theme_names():
    theme_dropdown.add_command(label=theme_name, command=lambda tn=theme_name: change_theme(tn))
theme_menu.place(x=10, y=10)

def add_output(result):
    output.delete(1.0, tb.END)
    output.insert(tb.END, result)

frames = {
    "Dashboard": tb.Frame(notebook),
    "System Tools": tb.Frame(notebook),
    "Advanced": tb.Frame(notebook),
    "Utilities": tb.Frame(notebook),
}

for name, frame in frames.items():
    notebook.add(frame, text=name)

button_config = {
    "Dashboard": [
        ("CPU Info", get_cpu_info),
        ("Memory Info", get_memory_info),
        ("Disk Usage", get_disk_usage),
        ("Network Speed", check_network_speed),
        ("System Info", get_system_info),
    ],
    "System Tools": [
        ("List Processes", list_running_processes),
        ("Clean Temp Files", clean_temp),
        ("Open Disk Cleanup", open_disk_cleanup),
        ("Create Restore Point", create_restore_point),
        ("Check for Updates", update_check),
    ],
    "Advanced": [
        ("Disable Startup", disable_startup_items),
        ("Uninstall Bloatware", uninstall_bloatware),
    ],
    "Utilities": [
        ("Scan Large Files", scan_large_files),
        ("Find Duplicates", find_duplicate_files),
        ("AI Suggestions", ai_suggestions),
    ]
}

def create_buttons(frame, btns):
    for i, (text, func) in enumerate(btns):
        btn = tb.Button(frame, text=text, command=threaded(func), width=25, bootstyle="info")
        btn.grid(row=i//3, column=i%3, padx=10, pady=10, sticky=W)

for section, btns in button_config.items():
    create_buttons(frames[section], btns)

if not is_admin():
    messagebox.showwarning("Admin Rights Required", "Run this app as administrator for full functionality.")

app.mainloop()
